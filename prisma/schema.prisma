// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  STREAMER
  CHARITY
  SHOP
}

model User {
  walletAddress     String           @id @unique @db.VarChar(42)
  email             String           @unique
  firstName         String
  lastName          String
  role              Role             @default(STREAMER)
  nick              String           @unique
  nonce             String?
  verified          Boolean          @default(false)
  urlPage           String           @db.VarChar(60)
  description       String           @default("") @db.VarChar(150)
  avatarPath        String?
  createdAt         DateTime         @default(now())
  updateAt          DateTime         @updatedAt
  token             Token?           @relation(fields: [tokenAddress], references: [address])
  tokenAddress      String?          @db.VarChar(42)
  Widget            Widget[]
  //If it necessary below fields (read speed?)
  allDonateCount    Int              @default(0)
  allDonateValue    Decimal          @default(0) @db.Decimal(78, 0)
  allDonateWithdraw Decimal          @default(0) @db.Decimal(78, 0)
  Cryptocurrency    Cryptocurrency[]
  Tip               Tip[]
  Withdraw          Withdraw[]
}

model Tip {
  txHash                String         @id @db.VarChar(66)
  // tokenAmount           Decimal        @db.Decimal(30, 1)
  tokenAmount           Decimal        @db.Decimal(78, 0)
  // value                 Decimal        @db.Decimal(30, 1)
  value                 Decimal        @db.Decimal(78, 0)
  message               String
  displayed             Boolean
  date                  DateTime       @default(now())
  user                  User           @relation(fields: [userWalletAddress], references: [walletAddress])
  userWalletAddress     String         @db.VarChar(42)
  cryptocurrency        Cryptocurrency @relation(fields: [cryptocurrencyAddress], references: [address])
  cryptocurrencyAddress String         @db.VarChar(42)
  tipper                Tipper         @relation(fields: [tipperWalletAddress], references: [walletAddress])
  tipperWalletAddress   String         @db.VarChar(42)
}

model Cryptocurrency {
  address           String     @id @unique @db.VarChar(42)
  symbol            String     @unique
  name              String     @unique
  chainId           Int
  imgPath           String?
  latestPrice       Decimal?   @db.Decimal(78, 0)
  priceUpdateAt     DateTime?
  Tip               Tip[]
  Withdraw          Withdraw[]
  User              User?      @relation(fields: [userWalletAddress], references: [walletAddress])
  userWalletAddress String?    @db.VarChar(42)
}

//you can use data from blockchain (total suplly, all transaction etc.)
model Token {
  address String @id @unique @db.VarChar(42)
  symbol  String @unique
  name    String @unique
  chainId Int
  User    User[]
}

model Tipper {
  walletAddress String  @id @unique @db.VarChar(42)
  nick          String  @unique
  nonce         String?
  allTipsValue  Int @default(0)
  Tip           Tip[]
}

model Widget {
  id                String  @id @default(cuid())
  url               String
  songPath          String
  backgroundPath    String
  nickColor         String
  messageColor      String
  valueColor        String
  showTime          Int
  filterProfanity   Boolean
  // filterWord WordList
  voiceMessage      Boolean
  User              User?   @relation(fields: [userWalletAddress], references: [walletAddress])
  userWalletAddress String? @db.VarChar(42)
}

model Withdraw {
  id                    String         @id @default(cuid())
  user                  User           @relation(fields: [userWalletAddress], references: [walletAddress])
  userWalletAddress     String         @db.VarChar(42)
  amount                Decimal        @db.Decimal(78, 0)
  cryptocurrency        Cryptocurrency @relation(fields: [cryptocurrencyAddress], references: [address])
  cryptocurrencyAddress String         @db.VarChar(42)
  date                  DateTime       @default(now())
  txHash                String         @unique @db.VarChar(66)
}

//sudo -u postgres psql
