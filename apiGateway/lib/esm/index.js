var l=(r,a,t)=>new Promise((n,e)=>{var s=o=>{try{g(t.next(o))}catch(u){e(u)}},i=o=>{try{g(t.throw(o))}catch(u){e(u)}},g=o=>o.done?n(o.value):Promise.resolve(o.value).then(s,i);g((t=t.apply(r,a)).next())});var m=class extends Error{constructor(t,n){super();this.type="ApiError";this.isOperational=!0;this.status=n!=null?n:400,this.message=t}},E=r=>r!==null&&typeof r=="object"&&"type"in r&&r.type==="ApiError",p=class extends Error{constructor(t,n,e,s,i){super();this.type="ValidationError";this.isOperational=!0;this.field=t,this.title=n,this.message=e,this.code=s,this.status=i!=null?i:422}static fromZodErrorArray(t,n){let e=[];return t.forEach(s=>{let i=new p(s.path[0],s.path[0],s.message,`${s.path[0]}.${s.code}`);e.push(i)}),e}static mapArrayByField(t){let n={};return t.forEach(e=>{n[e.field]=e.message}),n}},d=r=>r!==null&&typeof r=="object"&&"type"in r&&r.type==="ValidationError";var f=r=>!!(r[0]!==null&&typeof r[0]=="object"&&"isOperational"in r[0]&&r[0].isOperational);import{createClient as A}from"redis";import h from"dotenv";var{config:y}=h;y({path:process.env.dotenv_config_path?process.env.dotenv_config_path:".env"});var c=A({url:`redis://${process.env.REDIS_USER_NAME}:${process.env.REDIS_PASSWORD}@${process.env.REDIS_HOSTNAME}:${process.env.REDIS_PORT}`});c.on("error",r=>console.log("Redis Client Error",r));l(void 0,null,function*(){yield c.connect()});var O=(r,a)=>l(void 0,null,function*(){return new Promise((t,n)=>l(void 0,null,function*(){let e=yield c.get(r);if(e)return t(JSON.parse(e));let s=yield a();c.set(r,JSON.stringify(s)),t(s)}))});export{m as ApiError,p as ValidationError,O as getOrCache,E as isApiError,f as isOperationalErrorArray,d as isValidationError,c as redis};
