/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  UserToken,
  UserTokenInterface,
} from "../../../contracts/Tipdapp/UserToken";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "changeOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506122ce806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80634cd88b761161008c57806395d89b411161006657806395d89b411461024b578063a6f9dae114610269578063a9059cbb14610299578063dd62ed3e146102c9576100ea565b80634cd88b76146101e157806370a08231146101fd5780638da5cb5b1461022d576100ea565b806323b872dd116100c857806323b872dd1461015b578063313ce5671461018b57806340c10f19146101a957806342966c68146101c5576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f76102f9565b60405161010491906117fe565b60405180910390f35b610127600480360381019061012291906118c8565b6103c7565b6040516101349190611923565b60405180910390f35b610145610531565b604051610152919061194d565b60405180910390f35b61017560048036038101906101709190611968565b610577565b6040516101829190611923565b60405180910390f35b610193610839565b6040516101a091906119d7565b60405180910390f35b6101c360048036038101906101be91906118c8565b61087e565b005b6101df60048036038101906101da91906119f2565b610aed565b005b6101fb60048036038101906101f69190611b54565b610d24565b005b61021760048036038101906102129190611bcc565b610eae565b604051610224919061194d565b60405180910390f35b610235610f33565b6040516102429190611c08565b60405180910390f35b610253610f99565b60405161026091906117fe565b60405180910390f35b610283600480360381019061027e9190611bcc565b611067565b6040516102909190611923565b60405180910390f35b6102b360048036038101906102ae91906118c8565b6112f2565b6040516102c09190611923565b60405180910390f35b6102e360048036038101906102de9190611c23565b61136d565b6040516102f0919061194d565b60405180910390f35b606061030f6745e6ba75a0270eda60c01b611430565b61032367151e7df7acc2ea0160c01b611430565b61033767611737c9ba0a213160c01b611430565b6000805461034490611c92565b80601f016020809104026020016040519081016040528092919081815260200182805461037090611c92565b80156103bd5780601f10610392576101008083540402835291602001916103bd565b820191906000526020600020905b8154815290600101906020018083116103a057829003601f168201915b5050505050905090565b60006103dd675952e1c1daf6c1e460c01b611430565b6103f167cf032c8c7055d3b160c01b611430565b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506104866746d6d43bb292492c60c01b611430565b61049a67a6c26ca0df12fef360c01b611430565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516104f7919061194d565b60405180910390a3610513679759587a72a70c5a60c01b611430565b61052767122bdf12f4bd27a360c01b611430565b6001905092915050565b6000610547677f8a3a70ae4b92b060c01b611430565b61055b671661e218fe12a51d60c01b611430565b61056f671bd35d1d1e2a77e360c01b611430565b600254905090565b600061058d6721a2da746980ed4d60c01b611430565b6105a1675718f8e9a955ba8b60c01b611430565b6105b5677a222c953759b02160c01b611430565b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061064a67146430de96a5d69360c01b611430565b61065e67bf1e1e493b9aa13160c01b611430565b61067267eacbde09f640308260c01b611430565b828110156106b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ac90611d0f565b60405180910390fd5b6106c967454807159fba825d60c01b611430565b6106dd674178e4d243d8276c60c01b611430565b6106f16772e5c63a7363b78160c01b611430565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107bd5761072c67ea187464dce1306360c01b611430565b82816107389190611d5e565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107d2565b6107d16787b5a6170188863960c01b611430565b5b6107e667bf291e00bfcb7d8c60c01b611430565b6107fa670b7b7702329f12c360c01b611430565b610805858585611433565b61081967e77c31c41534c4db60c01b611430565b61082d671fcadab1729affb160c01b611430565b60019150509392505050565b600061084f67ede024b6b32fb2fc60c01b611430565b61086367922435c4de46ed7660c01b611430565b6108776733a0b0df0c919e2060c01b611430565b6012905090565b61089267a11005e0c5e2483760c01b611430565b6108a667d2da40ef8751b77a60c01b611430565b6108ba6760fa18376494928d60c01b611430565b6108ce67b89ece49f8eab59d60c01b611430565b6108e2670ff79623ed35734f60c01b611430565b3373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610972576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096990611dde565b60405180910390fd5b610986677d3408292acddab860c01b611430565b61099a677306d64f26c923a560c01b611430565b6109ae678101867535c76dce60c01b611430565b6109c2674f49054d753ade9f60c01b611430565b6109d66753aed1461f9b5cd760c01b611430565b6109ea67d60edfdc6c5b0b1760c01b611430565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550610a4b67b8cc7fb5335404f560c01b611430565b80600260008282540192505081905550610a6f675252fc0931e301dc60c01b611430565b610a836759ee3a957d817cd560c01b611430565b8173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610ae1919061194d565b60405180910390a35050565b610b01677720204d69ad86ee60c01b611430565b610b1567928b8877fc8783d860c01b611430565b610b2967da0013222c63422e60c01b611430565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610b81678cd50660a646554d60c01b611430565b610b95676a34bb74f70f72ad60c01b611430565b610ba9679accf673c429501760c01b611430565b81811015610bec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be390611e4a565b60405180910390fd5b610c00679189e762078e199460c01b611430565b610c1467a169b892778180f460c01b611430565b610c28670a97f1af23c931a560c01b611430565b818103600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c82670d077aed45a9241060c01b611430565b81600260008282540392505081905550610ca667fa140d7bf66cd80060c01b611430565b610cba674e7e6272e6b3df1960c01b611430565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d18919061194d565b60405180910390a35050565b610d3867dcc89f547e19e6b160c01b611430565b610d4c67abb4fc4c64c4750560c01b611430565b610d60677101512967037c6760c01b611430565b610d7467b251b05bf480f6db60c01b611430565b6000600360149054906101000a900460ff1660ff1614610dc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc090611eb6565b60405180910390fd5b610ddd6767b79e51c7fdad1b60c01b611430565b610df16760216c966de4bdce60c01b611430565b6001600360146101000a81548160ff021916908360ff160217905550610e2167fc67032730c4a38c60c01b611430565b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e766795423126290acc7860c01b611430565b8060009081610e859190612082565b50610e9a671bc320c23533e9ab60c01b611430565b8160019081610ea99190612082565b505050565b6000610ec467530d89166d7072dc60c01b611430565b610ed8673df1240e42ce89a560c01b611430565b610eec67d828c475407fdfbf60c01b611430565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610f49672be025e5f2917abc60c01b611430565b610f5d67e571d2f858def65c60c01b611430565b610f7167576c38fbc5f6bd6660c01b611430565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060610faf67e3a314202aacf7cb60c01b611430565b610fc367b41bb3fb0091063660c01b611430565b610fd7676c7e70c09f2a723260c01b611430565b60018054610fe490611c92565b80601f016020809104026020016040519081016040528092919081815260200182805461101090611c92565b801561105d5780601f106110325761010080835404028352916020019161105d565b820191906000526020600020905b81548152906001019060200180831161104057829003601f168201915b5050505050905090565b600061107d679151ef1336ed4af960c01b611430565b61109167d2da40ef8751b77a60c01b611430565b6110a56760fa18376494928d60c01b611430565b6110b967b89ece49f8eab59d60c01b611430565b6110cd670ff79623ed35734f60c01b611430565b3373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461115d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115490611dde565b60405180910390fd5b611171677d3408292acddab860c01b611430565b611185677306d64f26c923a560c01b611430565b61119967a40a8a5056ddb9b160c01b611430565b6111ad679a3958843989491360c01b611430565b6111c16772e6ef3d5e81d80c60c01b611430565b6111d567fddce46d6a4bca5b60c01b611430565b6111e9678aa5e2a0e41d8d1e60c01b611430565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124f906121a0565b60405180910390fd5b61126c67410824d6882811d460c01b611430565b6112806732d7ff3135ab918360c01b611430565b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506112d567fae0115478eb50b460c01b611430565b6112e967d70403873f8f607d60c01b611430565b60019050919050565b600061130867485f934aa97f525f60c01b611430565b61131c671117fd23d6000e1260c01b611430565b611330672a9c72b474916f5f60c01b611430565b61133b338484611433565b61134f67a527c597aee8f2a660c01b611430565b611363678a75cdcfb3167a1e60c01b611430565b6001905092915050565b6000611383672b68985f880abeec60c01b611430565b61139767c738aca88b49a81060c01b611430565b6113ab676e47b0dd1e26c32660c01b611430565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b50565b61144767840271c3ee34a69460c01b611430565b61145b67921ca53bcbd87b6560c01b611430565b61146f67c834ce54cbf5846860c01b611430565b611483674de88c704525489e60c01b611430565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e99061220c565b60405180910390fd5b6115066760a2ad9eddded4c560c01b611430565b61151a67bc0502d12803af2e60c01b611430565b61152e67b6a09087a51ddae860c01b611430565b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061158667535ee03aeed7db0860c01b611430565b61159a674556160a1a6b5e0460c01b611430565b6115ae677ee7b31f55ca3ec960c01b611430565b818110156115f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e890612278565b60405180910390fd5b6116056750513bb1d4ee6b6d60c01b611430565b61161967b9fbba80a63132fd60c01b611430565b61162d67050850200499b4ff60c01b611430565b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555061168e67b5e06c6ee68b2df660c01b611430565b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506116ef67e786d9f6b64f40fa60c01b611430565b6117036788daf7a9edd06a6360c01b611430565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611760919061194d565b60405180910390a350505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156117a857808201518184015260208101905061178d565b60008484015250505050565b6000601f19601f8301169050919050565b60006117d08261176e565b6117da8185611779565b93506117ea81856020860161178a565b6117f3816117b4565b840191505092915050565b6000602082019050818103600083015261181881846117c5565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061185f82611834565b9050919050565b61186f81611854565b811461187a57600080fd5b50565b60008135905061188c81611866565b92915050565b6000819050919050565b6118a581611892565b81146118b057600080fd5b50565b6000813590506118c28161189c565b92915050565b600080604083850312156118df576118de61182a565b5b60006118ed8582860161187d565b92505060206118fe858286016118b3565b9150509250929050565b60008115159050919050565b61191d81611908565b82525050565b60006020820190506119386000830184611914565b92915050565b61194781611892565b82525050565b6000602082019050611962600083018461193e565b92915050565b6000806000606084860312156119815761198061182a565b5b600061198f8682870161187d565b93505060206119a08682870161187d565b92505060406119b1868287016118b3565b9150509250925092565b600060ff82169050919050565b6119d1816119bb565b82525050565b60006020820190506119ec60008301846119c8565b92915050565b600060208284031215611a0857611a0761182a565b5b6000611a16848285016118b3565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a61826117b4565b810181811067ffffffffffffffff82111715611a8057611a7f611a29565b5b80604052505050565b6000611a93611820565b9050611a9f8282611a58565b919050565b600067ffffffffffffffff821115611abf57611abe611a29565b5b611ac8826117b4565b9050602081019050919050565b82818337600083830152505050565b6000611af7611af284611aa4565b611a89565b905082815260208101848484011115611b1357611b12611a24565b5b611b1e848285611ad5565b509392505050565b600082601f830112611b3b57611b3a611a1f565b5b8135611b4b848260208601611ae4565b91505092915050565b60008060408385031215611b6b57611b6a61182a565b5b600083013567ffffffffffffffff811115611b8957611b8861182f565b5b611b9585828601611b26565b925050602083013567ffffffffffffffff811115611bb657611bb561182f565b5b611bc285828601611b26565b9150509250929050565b600060208284031215611be257611be161182a565b5b6000611bf08482850161187d565b91505092915050565b611c0281611854565b82525050565b6000602082019050611c1d6000830184611bf9565b92915050565b60008060408385031215611c3a57611c3961182a565b5b6000611c488582860161187d565b9250506020611c598582860161187d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611caa57607f821691505b602082108103611cbd57611cbc611c63565b5b50919050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b6000611cf9601683611779565b9150611d0482611cc3565b602082019050919050565b60006020820190508181036000830152611d2881611cec565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d6982611892565b9150611d7483611892565b9250828203905081811115611d8c57611d8b611d2f565b5b92915050565b7f4f6e6c79206f776e657200000000000000000000000000000000000000000000600082015250565b6000611dc8600a83611779565b9150611dd382611d92565b602082019050919050565b60006020820190508181036000830152611df781611dbb565b9050919050565b7f4275726e20616d6f756e7420657863656564732062616c616e63650000000000600082015250565b6000611e34601b83611779565b9150611e3f82611dfe565b602082019050919050565b60006020820190508181036000830152611e6381611e27565b9050919050565b7f436f6e747261637420697320616c726561647920696e697469616c697a656400600082015250565b6000611ea0601f83611779565b9150611eab82611e6a565b602082019050919050565b60006020820190508181036000830152611ecf81611e93565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611f387fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611efb565b611f428683611efb565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611f7f611f7a611f7584611892565b611f5a565b611892565b9050919050565b6000819050919050565b611f9983611f64565b611fad611fa582611f86565b848454611f08565b825550505050565b600090565b611fc2611fb5565b611fcd818484611f90565b505050565b5b81811015611ff157611fe6600082611fba565b600181019050611fd3565b5050565b601f8211156120365761200781611ed6565b61201084611eeb565b8101602085101561201f578190505b61203361202b85611eeb565b830182611fd2565b50505b505050565b600082821c905092915050565b60006120596000198460080261203b565b1980831691505092915050565b60006120728383612048565b9150826002028217905092915050565b61208b8261176e565b67ffffffffffffffff8111156120a4576120a3611a29565b5b6120ae8254611c92565b6120b9828285611ff5565b600060209050601f8311600181146120ec57600084156120da578287015190505b6120e48582612066565b86555061214c565b601f1984166120fa86611ed6565b60005b82811015612122578489015182556001820191506020850194506020810190506120fd565b8683101561213f578489015161213b601f891682612048565b8355505b6001600288020188555050505b505050505050565b7f4e6577206f776e6572206973207a65726f206164647265737300000000000000600082015250565b600061218a601983611779565b915061219582612154565b602082019050919050565b600060208201905081810360008301526121b98161217d565b9050919050565b7f5472616e7366657220746f207a65726f20616464726573730000000000000000600082015250565b60006121f6601883611779565b9150612201826121c0565b602082019050919050565b60006020820190508181036000830152612225816121e9565b9050919050565b7f416d6f756e7420657863656564732062616c616e636500000000000000000000600082015250565b6000612262601683611779565b915061226d8261222c565b602082019050919050565b6000602082019050818103600083015261229181612255565b905091905056fea264697066735822122097ad69418dc2396a06baf9e9127f69c9d69ac00dd794db693ddc6ed45e48c18864736f6c63430008110033";

type UserTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UserTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UserToken__factory extends ContractFactory {
  constructor(...args: UserTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UserToken> {
    return super.deploy(overrides || {}) as Promise<UserToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UserToken {
    return super.attach(address) as UserToken;
  }
  override connect(signer: Signer): UserToken__factory {
    return super.connect(signer) as UserToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserTokenInterface {
    return new utils.Interface(_abi) as UserTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UserToken {
    return new Contract(address, _abi, signerOrProvider) as UserToken;
  }
}
