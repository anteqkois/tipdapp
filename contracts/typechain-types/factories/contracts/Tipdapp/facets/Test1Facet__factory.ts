/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Test1Facet,
  Test1FacetInterface,
} from "../../../../contracts/Tipdapp/facets/Test1Facet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "something",
        type: "address",
      },
    ],
    name: "TestEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceID",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func10",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func11",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func12",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func13",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func14",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func15",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func16",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func17",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func18",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func19",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func3",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func4",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func5",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func6",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func7",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func8",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func9",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610500806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806351b68a4d116100b85780639abf97aa1161007c5780639abf97aa146101f8578063b0e8fcc714610202578063cbb835f61461020c578063cd0bae0914610216578063cf3bbe1814610220578063db32da151461022a57610137565b806351b68a4d146101c657806371a99d6f146101d057806377e9d0d6146101da57806381b5207d146101e457806387952d22146101ee57610137565b806324c1d5a7116100ff57806324c1d5a714610194578063292c460d1461019e5780632cb83248146101a85780634484b3b9146101b257806350eb3f43146101bc57610137565b806301ffc9a71461013c5780630716c2ae1461016c578063110460471461017657806319c841ab1461018057806319e3b5331461018a575b600080fd5b61015660048036038101906101519190610467565b610234565b60405161016391906104af565b60405180910390f35b61017461024f565b005b61017e610265565b005b61018861027b565b005b610192610291565b005b61019c6102a7565b005b6101a66102bd565b005b6101b06102d3565b005b6101ba6102e9565b005b6101c46102ff565b005b6101ce610315565b005b6101d861032b565b005b6101e2610341565b005b6101ec610357565b005b6101f661036d565b005b610200610383565b005b61020a610399565b005b6102146103af565b005b61021e6103c5565b005b6102286103db565b005b6102326103f1565b005b600061024a67297113d4ddebad1e60c01b610407565b919050565b61026367117ec58147f461c660c01b610407565b565b610279678ec93fb036b6e6b560c01b610407565b565b61028f67b1d1c2b5a07fdd7060c01b610407565b565b6102a5671d67a99047c79ee760c01b610407565b565b6102bb675de5bacd71aa6dee60c01b610407565b565b6102d1676bcb6ed0ee29f18660c01b610407565b565b6102e76721600600ce30725360c01b610407565b565b6102fd673fbd0aa7ce95deb060c01b610407565b565b61031367bfa8fca16c21751560c01b610407565b565b61032967125bf26efe97a0fa60c01b610407565b565b61033f67172541f17259268160c01b610407565b565b61035567c6d1079549a514d260c01b610407565b565b61036b67345b025259b9271b60c01b610407565b565b61038167d4748ce24cc57beb60c01b610407565b565b61039767e39c9c6e960ed7aa60c01b610407565b565b6103ad6725542e02948e5ec260c01b610407565b565b6103c36715d5f9c98c2c1ba760c01b610407565b565b6103d9673a9e9fd1bfcb137560c01b610407565b565b6103ef67e6947dc4c12339ee60c01b610407565b565b61040567bea5b1090b48a15560c01b610407565b565b50565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6104448161040f565b811461044f57600080fd5b50565b6000813590506104618161043b565b92915050565b60006020828403121561047d5761047c61040a565b5b600061048b84828501610452565b91505092915050565b60008115159050919050565b6104a981610494565b82525050565b60006020820190506104c460008301846104a0565b9291505056fea2646970667358221220149eaf7e06c2c8aa011650f1c7a725d5e073945dea79b8da9f4f36dd7ba5c36964736f6c63430008110033";

type Test1FacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Test1FacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test1Facet__factory extends ContractFactory {
  constructor(...args: Test1FacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test1Facet> {
    return super.deploy(overrides || {}) as Promise<Test1Facet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test1Facet {
    return super.attach(address) as Test1Facet;
  }
  override connect(signer: Signer): Test1Facet__factory {
    return super.connect(signer) as Test1Facet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Test1FacetInterface {
    return new utils.Interface(_abi) as Test1FacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Test1Facet {
    return new Contract(address, _abi, signerOrProvider) as Test1Facet;
  }
}
