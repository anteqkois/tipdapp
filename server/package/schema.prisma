// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // output   = "./client"
  // binaryTargets = ["debian-openssl-1.1.x"]
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
  // binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  streamer
  charity
  shop
  tipper
}

enum ApperanceMode {
  dark
  light
}

//change AvatarPath to url
model User {
  address                String                  @id @unique @db.VarChar(42)
  nick                   String                  @unique
  email                  String                  @unique
  emailVerified          DateTime?
  firstName              String?
  lastName               String?
  verified               Boolean                 @default(false)
  createdAt              DateTime                @default(now())
  updateAt               DateTime                @updatedAt
  allTipsCount           Int                     @default(0)
  allTipsValue           Decimal                 @default(0) @db.Decimal(78, 0)
  allWithdrawsValue      Decimal                 @default(0) @db.Decimal(78, 0)
  roles                  Role[]                  @default([streamer, tipper])
  activeRole             Role                    @default(tipper)
  avatar                 File?                   @relation(fields: [avatarId], references: [id])
  avatarId               String?
  witdraws               Withdraw[]
  userToken              UserToken?
  tips                   Tip[]
  streamer               Streamer?
  tipper                 Tipper?
  sessions               Session[]
  verificationEmailToken VerificationEmailToken?
  settings               Settings?
}

model Session {
  ip            String   @id
  user          User     @relation(fields: [address], references: [address], onDelete: Cascade)
  address       String   @db.VarChar(42)
  refreshTokens String[]
  expires       DateTime?
}

model Settings {
  address       String        @id @unique @db.VarChar(42)
  user          User          @relation(fields: [address], references: [address], onDelete: Cascade)
  apperanceMode ApperanceMode @default(light)
}

model VerificationEmailToken {
  address String   @id @unique @db.VarChar(42)
  user    User     @relation(fields: [address], references: [address], onDelete: Cascade)
  token   String   @unique
  expires DateTime
}

model Streamer {
  user         User     @relation(fields: [address], references: [address])
  address      String   @id @db.VarChar(42)
  tipsCount    Int      @default(0)
  tipsValue    Decimal  @default(0) @db.Decimal(78, 0)
  page         Page     @relation(fields: [pageId], references: [id])
  pageId       String
  activeTokens Token[]
  widgets      Widget[]
}

model Tipper {
  user      User   @relation(fields: [address], references: [address])
  address   String @id @db.VarChar(42)
  nick      String @unique
  tipsValue Int    @default(0)
  tips      Tip[]
}

model Page {
  id          String     @id @default(cuid())
  affixUrl    String     @db.VarChar(60)
  description String?    @default("") @db.VarChar(200)
  baner       File?      @relation(fields: [banerId], references: [id])
  banerId     String?
  streamer    Streamer[]
}

model Tip {
  txHash               String    @id @db.VarChar(66)
  amount               Decimal   @db.Decimal(78, 0)
  value                Decimal   @db.Decimal(78, 0)
  message              String
  displayed            Boolean
  date                 DateTime  @default(now())
  receivedTokensAmount Decimal   @db.Decimal(78, 0)
  userRole             Role
  user                 User      @relation(fields: [userAddress], references: [address])
  userAddress          String    @db.VarChar(42)
  userToken            UserToken @relation(fields: [userTokenAddress], references: [address])
  userTokenAddress     String    @db.VarChar(42)
  token                Token     @relation(fields: [tokenAddress], references: [address])
  tokenAddress         String    @db.VarChar(42)
  tipper               Tipper    @relation(fields: [tipperAddress], references: [address])
  tipperAddress        String    @db.VarChar(42)
}

// model SimplePage {
//   id              String   @id @default(cuid())
//   url             String   @db.VarChar(60)
//   description     String?  @default("") @db.VarChar(200)
//   streamer        Streamer @relation(fields: [streamerAddress], references: [address])
//   streamerAddress String   @unique @db.VarChar(42)
// }

model UserToken {
  address     String @id @unique @db.VarChar(42)
  symbol      String @unique
  name        String @unique
  chainId     Int
  txHash      String @db.VarChar(66)
  user        User   @relation(fields: [userAddress], references: [address])
  userAddress String @unique @db.VarChar(42)
  Tip         Tip[]
}

model Widget {
  id              String    @id @default(cuid())
  url             String
  songPath        String
  backgroundPath  String
  nickColor       String
  messageColor    String
  valueColor      String
  showTime        Int
  filterProfanity Boolean
  // filterWord WordList
  voiceMessage    Boolean
  streamer        Streamer? @relation(fields: [streamerAddress], references: [address])
  streamerAddress String?   @db.VarChar(42)
}

model Token {
  address         String    @id @unique @db.VarChar(42)
  symbol          String    @unique
  name            String    @unique
  chainId         Int
  image           File?     @relation(fields: [imageId], references: [id])
  imageId         String?
  latestPrice     Decimal?  @db.Decimal(78, 0)
  priceUpdateAt   DateTime?
  streamer        Streamer? @relation(fields: [streamerAddress], references: [address])
  streamerAddress String?   @db.VarChar(42)
  Tip             Tip[]
}

model Withdraw {
  id          String   @id @default(cuid())
  amount      Decimal  @db.Decimal(78, 0)
  date        DateTime @default(now())
  txHash      String   @unique @db.VarChar(66)
  user        User?    @relation(fields: [userAddress], references: [address])
  userAddress String?  @db.VarChar(42)
}

model File {
  id        String  @id @default(cuid())
  filename  String
  extension String
  user      User[]
  token     Token[]
  page      Page[]
}
