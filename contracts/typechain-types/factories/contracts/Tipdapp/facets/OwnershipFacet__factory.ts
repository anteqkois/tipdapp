/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  OwnershipFacet,
  OwnershipFacetInterface,
} from "../../../../contracts/Tipdapp/facets/OwnershipFacet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061060b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b14610059575b600080fd5b610043610075565b60405161005091906104b9565b60405180910390f35b610073600480360381019061006e9190610505565b6100ac565b005b600061008b675bd0e3f2f28a571060c01b610123565b61009f67e290599c92500b4060c01b610123565b6100a7610126565b905090565b6100bf665c7dedf268bb3860c01b610123565b6100d36760e9dbbffbc2dd6760c01b610123565b6100e7674404857fb03993bc60c01b610123565b6100ef610181565b610103678c74f50980727be760c01b610123565b61011767a2f73aa2bc6d10da60c01b610123565b61012081610280565b50565b50565b600061013c673bc931c41c17375960c01b6103f7565b61015067ece7e3b115a673af60c01b6103f7565b6101586103fa565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610195674cd8ea8450283c6660c01b6103f7565b6101a96741e2e691e2166cd760c01b6103f7565b6101bd678d4ce6a3d6f7770760c01b6103f7565b6101d1678efb111757eeabfc60c01b6103f7565b6101d96103fa565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461026a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610261906105b5565b60405180910390fd5b61027e67f6e307ae25e8c1ad60c01b6103f7565b565b61029467490f858169e23fcf60c01b6103f7565b6102a867b8ec81ecfa37635f60c01b6103f7565b6102bc678a797775da8e062d60c01b6103f7565b60006102c66103fa565b90506102dc6756376c9f774eadcc60c01b6103f7565b6102f067522b0ad5c3c645ef60c01b6103f7565b60008160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061032d6793237f6eafb3a49e60c01b6103f7565b828260040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061038467b49f6572ba9a6b3f60c01b6103f7565b61039867e7504e6043fe28c460c01b6103f7565b8273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b50565b6000610410675af8ebdb599086bc60c01b6103f7565b6104246796706581f29c3cd660c01b6103f7565b610438676370795a1b2602b560c01b6103f7565b60007fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90506104716713dbeff0dfe7e6ca60c01b6103f7565b8091505090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104a382610478565b9050919050565b6104b381610498565b82525050565b60006020820190506104ce60008301846104aa565b92915050565b600080fd5b6104e281610498565b81146104ed57600080fd5b50565b6000813590506104ff816104d9565b92915050565b60006020828403121561051b5761051a6104d4565b5b6000610529848285016104f0565b91505092915050565b600082825260208201905092915050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b600061059f602283610532565b91506105aa82610543565b604082019050919050565b600060208201905081810360008301526105ce81610592565b905091905056fea2646970667358221220a3ba8c047e2a97d924aa0346b217f5cf71db9bdb34a4781cfd329791b64e8d8864736f6c63430008110033";

type OwnershipFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OwnershipFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OwnershipFacet__factory extends ContractFactory {
  constructor(...args: OwnershipFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OwnershipFacet> {
    return super.deploy(overrides || {}) as Promise<OwnershipFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OwnershipFacet {
    return super.attach(address) as OwnershipFacet;
  }
  override connect(signer: Signer): OwnershipFacet__factory {
    return super.connect(signer) as OwnershipFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OwnershipFacetInterface {
    return new utils.Interface(_abi) as OwnershipFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OwnershipFacet {
    return new Contract(address, _abi, signerOrProvider) as OwnershipFacet;
  }
}
