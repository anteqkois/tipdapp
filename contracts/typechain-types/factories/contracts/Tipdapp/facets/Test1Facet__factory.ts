/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Test1Facet,
  Test1FacetInterface,
} from "../../../../contracts/Tipdapp/facets/Test1Facet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "something",
        type: "address",
      },
    ],
    name: "TestEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceID",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func10",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func11",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func12",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func13",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func14",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func15",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func16",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func17",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func18",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func19",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func3",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func4",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func5",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func6",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func7",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func8",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func9",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506104ff806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806351b68a4d116100b85780639abf97aa1161007c5780639abf97aa146101f8578063b0e8fcc714610202578063cbb835f61461020c578063cd0bae0914610216578063cf3bbe1814610220578063db32da151461022a57610137565b806351b68a4d146101c657806371a99d6f146101d057806377e9d0d6146101da57806381b5207d146101e457806387952d22146101ee57610137565b806324c1d5a7116100ff57806324c1d5a714610194578063292c460d1461019e5780632cb83248146101a85780634484b3b9146101b257806350eb3f43146101bc57610137565b806301ffc9a71461013c5780630716c2ae1461016c578063110460471461017657806319c841ab1461018057806319e3b5331461018a575b600080fd5b61015660048036038101906101519190610466565b610234565b60405161016391906104ae565b60405180910390f35b61017461024f565b005b61017e610265565b005b61018861027b565b005b610192610290565b005b61019c6102a6565b005b6101a66102bc565b005b6101b06102d2565b005b6101ba6102e8565b005b6101c46102fe565b005b6101ce610314565b005b6101d861032a565b005b6101e2610340565b005b6101ec610356565b005b6101f661036c565b005b610200610382565b005b61020a610398565b005b6102146103ae565b005b61021e6103c4565b005b6102286103da565b005b6102326103f0565b005b600061024a67108d2b0fadb9e84460c01b610406565b919050565b61026367c6d1079549a514d260c01b610406565b565b610279673fbd0aa7ce95deb060c01b610406565b565b61028e669afdb04c88889760c01b610406565b565b6102a46721600600ce30725360c01b610406565b565b6102ba676bcb6ed0ee29f18660c01b610406565b565b6102d067e42d4b4e75e34d2860c01b610406565b565b6102e667f69f930d3594e8cc60c01b610406565b565b6102fc672faff1bbde09d80160c01b610406565b565b610312672563b35cce3bb5ed60c01b610406565b565b61032867a7f56914a31536ea60c01b610406565b565b61033e67297113d4ddebad1e60c01b610406565b565b610354670439f1bdd6f1c3ff60c01b610406565b565b61036a675aeb8794320a27d860c01b610406565b565b61038067db0b0b130bfb5dc660c01b610406565b565b61039667a79cc07d21ab380060c01b610406565b565b6103ac679d9dd96c69a9bdfa60c01b610406565b565b6103c26725542e02948e5ec260c01b610406565b565b6103d867abecab019461f50160c01b610406565b565b6103ee67e39c9c6e960ed7aa60c01b610406565b565b610404676fc141aa11e0f09260c01b610406565b565b50565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6104438161040e565b811461044e57600080fd5b50565b6000813590506104608161043a565b92915050565b60006020828403121561047c5761047b610409565b5b600061048a84828501610451565b91505092915050565b60008115159050919050565b6104a881610493565b82525050565b60006020820190506104c3600083018461049f565b9291505056fea26469706673582212207fa39cca523f8fbcff8864b9bf85b3b8fc391a4c08e8195abe4ea00930a2fb9364736f6c63430008110033";

type Test1FacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Test1FacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test1Facet__factory extends ContractFactory {
  constructor(...args: Test1FacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test1Facet> {
    return super.deploy(overrides || {}) as Promise<Test1Facet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test1Facet {
    return super.attach(address) as Test1Facet;
  }
  override connect(signer: Signer): Test1Facet__factory {
    return super.connect(signer) as Test1Facet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Test1FacetInterface {
    return new utils.Interface(_abi) as Test1FacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Test1Facet {
    return new Contract(address, _abi, signerOrProvider) as Test1Facet;
  }
}
