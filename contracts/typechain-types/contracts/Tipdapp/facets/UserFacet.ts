/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface UserFacetInterface extends utils.Interface {
  functions: {
    "balanceERC20(address,address)": FunctionFragment;
    "balanceETH(address)": FunctionFragment;
    "donateERC20(bytes,uint256,uint256,uint256,uint256,uint256,address,address,address)": FunctionFragment;
    "donateETH(address)": FunctionFragment;
    "registerUser(string,string)": FunctionFragment;
    "userToken(address)": FunctionFragment;
    "withdrawERC20(address)": FunctionFragment;
    "withdrawETH()": FunctionFragment;
    "withdrawManyERC20(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceERC20"
      | "balanceETH"
      | "donateERC20"
      | "donateETH"
      | "registerUser"
      | "userToken"
      | "withdrawERC20"
      | "withdrawETH"
      | "withdrawManyERC20"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceETH",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "donateERC20",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "donateETH",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawManyERC20",
    values: [PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donateERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donateETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawManyERC20",
    data: BytesLike
  ): Result;

  events: {
    "Donate(address,address,address,uint256)": EventFragment;
    "NewUser(address,address)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Donate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DonateEventObject {
  donator: string;
  addressToDonate: string;
  tokenAddress: string;
  tokenAmount: BigNumber;
}
export type DonateEvent = TypedEvent<
  [string, string, string, BigNumber],
  DonateEventObject
>;

export type DonateEventFilter = TypedEventFilter<DonateEvent>;

export interface NewUserEventObject {
  userAddress: string;
  userToken: string;
}
export type NewUserEvent = TypedEvent<[string, string], NewUserEventObject>;

export type NewUserEventFilter = TypedEventFilter<NewUserEvent>;

export interface WithdrawEventObject {
  user: string;
  tokenAddress: string;
  tokenAmount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface UserFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UserFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceERC20(
      _userAddress: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _balance: BigNumber }>;

    balanceETH(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _balance: BigNumber }>;

    donateERC20(
      _signature: PromiseOrValue<BytesLike>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _mintTokenAmount: PromiseOrValue<BigNumberish>,
      _toUser: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _timestampOffChain: PromiseOrValue<BigNumberish>,
      _addressToDonate: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _userTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donateETH(
      _addressToDonate: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerUser(
      _tokenSymbol: PromiseOrValue<string>,
      _tokenName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userToken(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdrawERC20(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawManyERC20(
      _tokenAddress: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balanceERC20(
    _userAddress: PromiseOrValue<string>,
    _tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceETH(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  donateERC20(
    _signature: PromiseOrValue<BytesLike>,
    _tokenAmount: PromiseOrValue<BigNumberish>,
    _mintTokenAmount: PromiseOrValue<BigNumberish>,
    _toUser: PromiseOrValue<BigNumberish>,
    _fee: PromiseOrValue<BigNumberish>,
    _timestampOffChain: PromiseOrValue<BigNumberish>,
    _addressToDonate: PromiseOrValue<string>,
    _tokenAddress: PromiseOrValue<string>,
    _userTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donateETH(
    _addressToDonate: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerUser(
    _tokenSymbol: PromiseOrValue<string>,
    _tokenName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userToken(
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  withdrawERC20(
    _tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawETH(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawManyERC20(
    _tokenAddress: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceERC20(
      _userAddress: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceETH(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donateERC20(
      _signature: PromiseOrValue<BytesLike>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _mintTokenAmount: PromiseOrValue<BigNumberish>,
      _toUser: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _timestampOffChain: PromiseOrValue<BigNumberish>,
      _addressToDonate: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _userTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    donateETH(
      _addressToDonate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerUser(
      _tokenSymbol: PromiseOrValue<string>,
      _tokenName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    userToken(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawERC20(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETH(overrides?: CallOverrides): Promise<void>;

    withdrawManyERC20(
      _tokenAddress: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Donate(address,address,address,uint256)"(
      donator?: PromiseOrValue<string> | null,
      addressToDonate?: PromiseOrValue<string> | null,
      tokenAddress?: null,
      tokenAmount?: null
    ): DonateEventFilter;
    Donate(
      donator?: PromiseOrValue<string> | null,
      addressToDonate?: PromiseOrValue<string> | null,
      tokenAddress?: null,
      tokenAmount?: null
    ): DonateEventFilter;

    "NewUser(address,address)"(
      userAddress?: PromiseOrValue<string> | null,
      userToken?: null
    ): NewUserEventFilter;
    NewUser(
      userAddress?: PromiseOrValue<string> | null,
      userToken?: null
    ): NewUserEventFilter;

    "Withdraw(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      tokenAddress?: null,
      tokenAmount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      tokenAddress?: null,
      tokenAmount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    balanceERC20(
      _userAddress: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceETH(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donateERC20(
      _signature: PromiseOrValue<BytesLike>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _mintTokenAmount: PromiseOrValue<BigNumberish>,
      _toUser: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _timestampOffChain: PromiseOrValue<BigNumberish>,
      _addressToDonate: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _userTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donateETH(
      _addressToDonate: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerUser(
      _tokenSymbol: PromiseOrValue<string>,
      _tokenName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userToken(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawERC20(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawManyERC20(
      _tokenAddress: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceERC20(
      _userAddress: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceETH(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donateERC20(
      _signature: PromiseOrValue<BytesLike>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _mintTokenAmount: PromiseOrValue<BigNumberish>,
      _toUser: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _timestampOffChain: PromiseOrValue<BigNumberish>,
      _addressToDonate: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _userTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donateETH(
      _addressToDonate: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerUser(
      _tokenSymbol: PromiseOrValue<string>,
      _tokenName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userToken(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawManyERC20(
      _tokenAddress: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
