/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Test2Facet,
  Test2FacetInterface,
} from "../../../../contracts/Tipdapp/facets/Test2Facet";

const _abi = [
  {
    inputs: [],
    name: "test2Func1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func10",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func11",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func12",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func13",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func14",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func15",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func16",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func17",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func18",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func19",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func3",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func4",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func5",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func6",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func7",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func8",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2Func9",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506103ea806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638ee8be30116100ad578063d2f0c73e11610071578063d2f0c73e146101c7578063e5f687b2146101d1578063e7de23a4146101db578063ea36b558146101e5578063ef3f4d78146101ef5761012c565b80638ee8be301461019557806391d0396b1461019f578063c670641d146101a9578063ca5fa5c0146101b3578063caae8f23146101bd5761012c565b80632e463958116100f45780632e463958146101635780635fd6312b1461016d5780636dc16b0114610177578063792a8e2e14610181578063884280a61461018b5761012c565b806303feeeae146101315780630c103a931461013b5780630e4cd7fc14610145578063148843091461014f57806317fd06e714610159575b600080fd5b6101396101f9565b005b61014361020f565b005b61014d610225565b005b61015761023b565b005b610161610251565b005b61016b610267565b005b61017561027d565b005b61017f610293565b005b6101896102a9565b005b6101936102bf565b005b61019d6102d5565b005b6101a76102eb565b005b6101b1610301565b005b6101bb610317565b005b6101c561032d565b005b6101cf610343565b005b6101d9610359565b005b6101e361036f565b005b6101ed610385565b005b6101f761039b565b005b61020d67da4a0081a4bcd3ad60c01b6103b1565b565b6102236758fb5a5b4d978d0e60c01b6103b1565b565b61023967398dfbb85492648b60c01b6103b1565b565b61024f67d6c799798fa0558260c01b6103b1565b565b61026567ab74f41617b0d28560c01b6103b1565b565b61027b678b97c0b746f92db760c01b6103b1565b565b61029167e7d62e457042390d60c01b6103b1565b565b6102a767b7efb2595360a33360c01b6103b1565b565b6102bd67b3b86d57ea2b353860c01b6103b1565b565b6102d367eabcc27879c7d13960c01b6103b1565b565b6102e967fe2053867c66e76360c01b6103b1565b565b6102ff677f09c3f6ab6e990a60c01b6103b1565b565b61031567a8a0648dfe028b6f60c01b6103b1565b565b61032b6762b73d6162ce4a1c60c01b6103b1565b565b6103416791f2d5a558d175cb60c01b6103b1565b565b610357677388042fe064184560c01b6103b1565b565b61036d67c965da0f4f5535a760c01b6103b1565b565b61038367cb5fe4de3f64560660c01b6103b1565b565b61039967ba76932bf0d7eaee60c01b6103b1565b565b6103af67590690939793c97d60c01b6103b1565b565b5056fea2646970667358221220ed5fdfe552e81a2662610ac6184e13cb6308ceddfbffa30b100ef677cfa22ad064736f6c63430008110033";

type Test2FacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Test2FacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test2Facet__factory extends ContractFactory {
  constructor(...args: Test2FacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test2Facet> {
    return super.deploy(overrides || {}) as Promise<Test2Facet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test2Facet {
    return super.attach(address) as Test2Facet;
  }
  override connect(signer: Signer): Test2Facet__factory {
    return super.connect(signer) as Test2Facet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Test2FacetInterface {
    return new utils.Interface(_abi) as Test2FacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Test2Facet {
    return new Contract(address, _abi, signerOrProvider) as Test2Facet;
  }
}
